<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library-and-frameworks on /usr/lib/libsora.so</title>
    <link>https://libsora.so/library-and-framework/</link>
    <description>Recent content in Library-and-frameworks on /usr/lib/libsora.so</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 09 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://libsora.so/library-and-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DBML: Database Markup Language</title>
      <link>https://libsora.so/posts/dbml-entity-relation-diagram-as-code/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/dbml-entity-relation-diagram-as-code/</guid>
      <description>개요 IaC (Infrastructure as Code) 뽕을 맞은 이후로는 될 수 있는한 많은 것을 코드로 표현하려고 노력했다. ERD (Entity-relation diagram)도 코드로 표현하고 싶었던 물건이다. 마우스로 ERD 그리는 것은 고통스러워서 될 수 있는한 하고 싶지 않았다. 여기에서 도망치려고 잔머리 굴리다 찾은 좋은 물건이 DBML이다.
내가 말하는 DBML은 마이크로소프트의 DBML과는 다른 것이다. DBML로 검색했을때 문서에 visual studio, LINQ, XML이 같이 보이면 마이크로소프트 DBML일 확률이 높다.
내가 생각하는 장점 DBML은 코드로 ERD를 그릴 수 있다.</description>
    </item>
    
    <item>
      <title>mermaid: diagram as code</title>
      <link>https://libsora.so/posts/mermaid-diagram-as-code/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/mermaid-diagram-as-code/</guid>
      <description>개요 UML 사용하면 글로만 이야기하는 것보다 편리하다. 하지만 UML을 마우스로 그리는건 매우 피곤하고 유지보수 하기 어렵다. 마우스로 그림 그리는 도구는 나중에 변경되어도 뭐가 바뀌었는지 찾기 어렵다.
IaC(Infrastructure as Code)처럼 UML as Code, Diagram as Code 같은거로 문서를 그리고 싶었다. 한동안은 SequenceDiagram.org를 찾아서 잘 썼다. 하지만 구글 문서에 UML 넣는 목적으로는 좋지 않다. png로 export해서 구글 문서에 끼워넣는걸 반복하는게 너무 귀찮았다.
더 좋은 도구를 뒤지다 mermaid를 찾았다.
내가 생각하는 장점 mermaid는 오픈소스이다.</description>
    </item>
    
    <item>
      <title>yup로 입력 검증을 덜 귀찮게 처리하자</title>
      <link>https://libsora.so/posts/yup-declarative-input-validation/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/yup-declarative-input-validation/</guid>
      <description>개요 프로그래머가 러스트, C#, 타입스크립트같은 타입 있는 언어로 코드를 짜면 컴파일러에 의해서 타입이 보장되니 런타임에서 문제가 생기지 않는다. 미개한 스크립트 언어들만이 런타임에서 타입으로 문제가 생긴다. 그러니까 우리는 정적 언어를 써야한다.
물론 세상은 그렇게 굴러가지 않는다. 프로그래머가 코드를 완벽하게 통제하고 있을수는 있어도 외부에서의 입력까지 완벽하게 통제할수는 없다. 특히 인터넷에 연결된 서버의 경우는 밖에서 어떤 입력이 들어올지 알 수 없다. 그렇기 때문에 입력 검증은 필요하다.
선언형 입력 검증 입력 검증은 뻔한 부분이 많다.</description>
    </item>
    
  </channel>
</rss>
