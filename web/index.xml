<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webs on /usr/lib/libsora.so</title>
    <link>https://libsora.so/web/</link>
    <description>Recent content in Webs on /usr/lib/libsora.so</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 12 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://libsora.so/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>express에서 에러로 HTTP status code 통제하기</title>
      <link>https://libsora.so/web/express-error-and-http-status-code/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/web/express-error-and-http-status-code/</guid>
      <description>throw new Error(&amp;lsquo;BadRequest&amp;rsquo;) 자바스크립트에서 Error를 던져서 에러 처리하는 것은 쉽고 간단한 방법이다. express에서도 마찬가지이다. Error를 던지면 200 OK가 아닌 500 Internal Server Error를 발생시킬 수 있다.
const express = require(&#39;express&#39;); const app = express(); app.get(&#39;/&#39;, (req, res) =&amp;gt; { throw new Error(&#39;BadRequest&#39;); }); app.listen(3000, () =&amp;gt; { console.log(&#39;listen&#39;); });  요즘 세상에 에러났다고 무조건 500을 던지면 멍청한 REST API처럼 보인다. 상황에 맞춰서 4xx, 5xx를 던져야한다. 500 아닌 상태 코드를 보내고 싶으면 res.</description>
    </item>
    
    <item>
      <title>나의 warning.or.kr 검열기</title>
      <link>https://libsora.so/posts/trade-my-info-warning-or-kr/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/trade-my-info-warning-or-kr/</guid>
      <description>대한민국에는 악명높은 warning.or.kr가 있다. 나는 warning.or.kr을 국가에서 수행하는 검열이라고 생각하지만 이를 직접 비판하기는 어렵다.
 warning.or.kr 먹는 사이트는 보통 문제가 있는 사이트  현 상황에서 warning.or.kr을 비판하면 &amp;ldquo;범죄를 방치하자는거냐?&amp;rdquo; 라는 소리를 들을수 있다. 여기는 헬반도니까.   warning.or.kr 먹는 사이트 운영자는 일반적으로 음지의 사람  컨텐츠 자체에 문제가 있으니까 워닝을 당했을 것이다. 음지의 사람이라면 당당하게 떠들고 다니긴 어려울 것이다.    많은 검열된 사이트에는 위의 문제가 있을 것이다. 하지만 모든 검열된 사이트에 문제가 있는 것은 아니다.</description>
    </item>
    
    <item>
      <title>importd - Django as a micro-framework</title>
      <link>https://libsora.so/posts/introduce-importd/</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/introduce-importd/</guid>
      <description>What is importd? importd (importd-repo) 는 Amit Upadhyay 님이 django micro framework이다. 우리나라에는 거의 알려져있지 않은데 @cedar101 님의 소개로 알게 되어서 사용해봤다. 직접 쓰면서 느낀 importd의 특징을 정리해봤다.
micro-framework importd Hello World
#!/usr/bin/env python from importd import d @d(&amp;quot;/&amp;quot;) def index(request): return d.HttpResponse(&amp;quot;Hello World&amp;quot;) if __name__ == &amp;quot;__main__&amp;quot;: d.main()  flask Hello World
#!/usr/bin/env python from flask import Flask app = Flask(__name__) @app.route(&amp;quot;/&amp;quot;) def hello(): return &amp;quot;Hello World!&amp;quot; if __name__ == &amp;quot;__main__&amp;quot;: app.</description>
    </item>
    
    <item>
      <title>Django용 적절한 라이브러리 소개</title>
      <link>https://libsora.so/posts/good-django-library/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/good-django-library/</guid>
      <description>2년 전, 신규 웹 프로젝트를 django로 시작했지만 django의 몇가지 문제 때문에 flask로 갈아탔다. 프로젝트 시작한지 얼마되지 않은 시점이어서 코드가 별로 없었기 때문에 프레임웍을 바꾸는것이 별 부담이 되지 않았고 django에서 어떻게든 문제를 해결하려고 삽질할 수도 있었겠지만 flask로 선택하면 바로 해결되기 때문에 삽질하기 귀찮아서 django를 버렸다.
지금 시점에서 django와 flask 중 하나를 선택하라고 어떻게 할까? 지금은 django로 여러가지 삽질을 해서 과거에 해결하지 못했던 문제를 해결할 수 있는 라이브러리를 알고 있다. 그래서 이번 기회에 내가 알고있는 django를 flask만큼 좋게 만드는 몇가지 라이브러리를 소개한다.</description>
    </item>
    
    <item>
      <title>한국형 반응형웹 프레임웍을 찾아서</title>
      <link>https://libsora.so/posts/ie7-responsive-web-framework/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/ie7-responsive-web-framework/</guid>
      <description>Trade My Info의 GA 통계에서 볼 수 있듯이 2014년 2월 기준 우리나라에서 IE 7,8의 사용비율은 데탑유저 중 15%이다. 이를 버리고 차세대 웹으로 가고싶은 마음은 있지만 어쩔수 없이 IE 7,8을 지원해야 하는게 현실이다.
반응형웹 디자인을 도입하면 데스크탑/모바일 웹디자인을 따로 만들 필요가 없다는 것을 포함해서 여러가지 장점이 있다. 그런데 &amp;ldquo;반응형웹 디자인은 좋구나!&amp;rdquo; 하고 도입하려고 하는 순간 한가지 문제가 발생한다. 구형IE에서 깨질 가능성이 높다는 것이다.
그래서 반응형웹 디자인을 IE7,8에서도 별 문제없이 도입하기 위해서 사용할만한 웹 프레임웍을 정리해봤다.</description>
    </item>
    
    <item>
      <title>Trade My Info의 GA 통계</title>
      <link>https://libsora.so/posts/trade-my-info-ga/</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/trade-my-info-ga/</guid>
      <description>&amp;ldquo;Trade My Info No.1 온라인 개인정보거래소&amp;rdquo; trade-my-info 를 만들때 그냥 GA를 달아놨었다. 그런데 생각보다 사이트가 흥해서 쓸만한 통계가 모였길래 정리해봤다.
예상 사용자 SNS를 하는 사람일 것이다. 최초로 공개한 루트는 트위터다. 그리고 모든 유입경로를 통틀어 가장 규모가 큰 것이 페이스북이더라. SNS를 통해서 유입된 비율은 전체의 50%라는게 근거다.
적어도 하나의 커뮤니티에서는 눈팅이라도 할것이다. 뽐뿌, PGR21, 오유, battlepage 등을 통해서 유입된 인원이 30%라는것을 기반으로 예상했다.
평소에 인터넷을 계속 접속하는 사람일 것이다. SNS를 하거나 커뮤니티를 보고 있다는건 인터넷에 익숙한 사람일 것이다.</description>
    </item>
    
    <item>
      <title>GitHub Pages와 travis-ci를 엮은 정적 블로그 자동화</title>
      <link>https://libsora.so/posts/static-blog-sample/</link>
      <pubDate>Sat, 01 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/static-blog-sample/</guid>
      <description>이 블로그에 travis-ci를 붙인 기념 static html generator 좋다고 영업좀 하고 약팔자 정리 안해놓으면 나중에 또 까먹을까봐(실제로 했던 작업 글 쓰면서 다시 했는데 또 삽질했다 -_-  그래서 github pages와 travis-ci 연동하는 방법을 정리했다.
자세한건 static blog sample 를 참고.</description>
    </item>
    
    <item>
      <title>Flask Project 구조 예제</title>
      <link>https://libsora.so/posts/flask-project-structure/</link>
      <pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/flask-project-structure/</guid>
      <description>요즘에는 Flask를 주력으로 사용하고 있다. Flask는 가볍게 쓰는것을 목표로 설계된 라이브러리다 보니까 프로젝트 구조를 어떻게 잡을지에 대한 가이드라인조차 딱히 제시하지 않는다.(django에서는 프로젝트 트리를 미리 제시하기 떄문에 이런 고민을 굳이 깊게할 필요가 없다) 그래서 내가 요즘 사용하는 구조를 정리해봤다
Flask Project Structure ROOT ├── common │ ├── __init__.py │ ├── http.py │ ├── mobile.py │ ├── db.py │ ├── testlibs.py │ └── ... ├── like │ ├── __init__.py │ ├── controllers.py │ ├── models.</description>
    </item>
    
    <item>
      <title>Django Project 구조 예제</title>
      <link>https://libsora.so/posts/django-project-structure/</link>
      <pubDate>Wed, 30 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://libsora.so/posts/django-project-structure/</guid>
      <description>최근에 Django로 코딩한적이 있다. django는 기본적으로 프로젝트 트리에 적절한 제약이 걸려있기 떄문에 굳이 신경안쓰고 django 가이드라인에서 제공하는대로 짜도 별 문제는 없을것이다. django 에서 제시하는 가이드라인에 일부 참고자료를 덧붙여서 내 나름대로 사용했던 프로젝트 구조를 정리해봤다. 일단 목표한 요구사항은 다음과 같다.
 외부라이브러리를 막 집어넣어도 문제가 생기지 않을것 템플릿을 한곳에 모아서 관리하기. 템플릿 파일은 개발자가 아니라 디자이너가 편집하게 될 파일이니까 따로 모아놓는쪽이 관리하기 편할것이다.  Django Project Structure ROOT ├── apps │ ├── __init__.</description>
    </item>
    
  </channel>
</rss>
